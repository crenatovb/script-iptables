#!/bin/bash
modprobe ip_tables

function LimpaRegras(){
echo -n "Limpando regras IPTABLES .................................. "
 # Limpando as Chains
 iptables -F INPUT
 iptables -F OUTPUT
 iptables -F FORWARD
 iptables -F -t filter
 iptables -F POSTROUTING -t nat
 iptables -F PREROUTING -t nat
 iptables -F OUTPUT -t nat
 iptables -F -t nat
 iptables -t nat -F
 iptables -t mangle -F
 iptables -X
 # Zerando contadores
 iptables -Z
 iptables -t nat -Z
 iptables -t mangle -Z
 # Define politicas padrao ACCEPT
 iptables -P INPUT ACCEPT
 iptables -P OUTPUT ACCEPT
 iptables -P FORWARD ACCEPT
}

function AtivaPing(){
 echo -n "Ativando resposta do ping ................................. "
 echo "0" > /proc/sys/net/ipv4/icmp_echo_ignore_all
}

function DesativaProtecao(){
 echo -n "Removendo proteções nativa do Sistema Operacional ......... "
 i=/proc/sys/net/ipv4
 echo "1" > /proc/sys/net/ipv4/ip_forward
 echo "0" > $i/tcp_syncookies
 echo "0" > $i/icmp_echo_ignore_broadcasts
 echo "0" > $i/icmp_ignore_bogus_error_responses
 for i in /proc/sys/net/ipv4/conf/*; do
   echo "1" > $i/accept_redirects
   echo "1" > $i/accept_source_route
   echo "0" > $i/log_martians
   echo "0" > $i/rp_filter
 done
}

function limpatabelas(){
echo -n "Limpando regras IPTABLES .................................. "
# limpando tabelas
iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X
}

function ativaprotecao(){
echo -n "Ativando proteções nativa do Sistema Operacional .......... "
# Ativando algumas coisas básicas do kernel
echo 1 > /proc/sys/net/ipv4/tcp_syncookies                     # Abilitar o uso de syncookies (muito útil para evitar SYN flood attacks)
# Caso queira bloquear pings para o host
#echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all              # desabilita o "ping" (Mensagens ICMP) para sua máquina
echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects          # Não aceite redirecionar pacotes ICMP
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses  # Ative a proteção contra respostas a mensagens de erro falsas
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts        # Evita a peste do Smurf Attack e alguns outros de redes locais
}

function politicaspadrao(){
echo -n "Configurando politica padrao IPTABLES ..................... "
# Configurando as políticas padrões
iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP
}

function pkgsyn (){
echo -n "Ativando proteção contra ataque SYN ....................... "
iptables -A INPUT -p tcp ! --syn -m conntrack --ctstate NEW -m limit --limit 5/m --limit-burst 7 -j LOG --log-level 4 --log-prefix "Drop Syn"
iptables -A INPUT -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
}

function pkgfragmentado (){
echo -n "Ativando proteção contra pacotes fragmentados ............. "
iptables -A INPUT -f -m limit --limit 5/m --limit-burst 7 -j LOG --log-level 4 --log-prefix "Fragments Packets"
iptables -A INPUT -f -j DROP
iptables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP
}

function pkgnull (){
echo -n "Ativando proteção contra pacotes NULL ..................... "
iptables -A INPUT -p tcp --tcp-flags ALL NONE -m limit --limit 5/m --limit-burst 7 -j LOG --log-level 4 --log-prefix "NULL Packets"
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP # NULL packets
iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
}

function pkgxmas (){
echo -n "Ativando proteção contra pacotes XMAS ..................... "
iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-level 4 --log-prefix "XMAS Packets"
iptables -A INPUT -i eth0 -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP #XMAS
}

function pkgfin (){
echo -n "Ativando proteção contra scan FIN ......................... "
iptables -A INPUT -p tcp --tcp-flags FIN,ACK FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-level 4 --log-prefix "Fin Packets Scan"
iptables -A INPUT -p tcp --tcp-flags FIN,ACK FIN -j DROP # FIN packet scans
iptables -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
}

function smurf () {
echo -n "Ativando proteção contra ataque SMURF ..................... "
iptables -A INPUT -p icmp -m icmp --icmp-type address-mask-request -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type timestamp-request -j DROP
}

function pkginvalidos () {
echo -n "Ativando proteção para descarte de pacotes invalidos ...... "
iptables -A INPUT -m conntrack --ctstate INVALID -j DROP
iptables -A FORWARD -m conntrack --ctstate INVALID -j DROP
iptables -A OUTPUT -m conntrack --ctstate INVALID -j DROP
}

function flagsrst () {
echo -n "Ativando proteção para limite de flags RST ................ "
iptables -A INPUT -p tcp -m tcp --tcp-flags RST RST -m limit --limit 2/second --limit-burst 2 -j ACCEPT
}

function portscan () {
echo -n "Ativando protação contra portcan NMAP ......................"
iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m recent --set
iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m recent --update --seconds 30 --hitcount 10 -j LOG --log-prefix "TENTATIVA SCAN "
iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m recent --update --seconds 30 --hitcount 10 -j DROP
iptables -A INPUT -p tcp --tcp-flags ALL FIN,SYN -j DROP
}

function permitirloop(){
echo -n "Permitindo loopback ....................................... "
# Permitindo loopback
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT
# Mantém a sessão das conexões
# Obs1: Com o uso do módulo state, não é necessário criar regras de "ida" e "volta"
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED,NEW -j ACCEPT
iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED,NEW -j ACCEPT
}

function filter(){
echo -n "Regras da tabela FILTER  .................................. "
#######################################
# --------- TABELA FILTER ----------- #
#######################################
# As regras contidas na tabela Filter determinam a aceitação (ou não) de um pacote.
# Dentro dessa camada existem três cadeias: INPUT, OUTPUT e FORWARD.

######################################
# --------- TRAFEGO INPUT  --------- #
######################################
# Essa cadeia contém as regras que tratam os pacotes destinados ao Firewall.

# --> Exemplos <-- #
# Permite acesso SSH do endereço 192.168.10.1
# Obs1: O endereço 192.168.10.1 representa um endereço externo
iptables -A INPUT -p tcp -s 192.168.10.1 --dport 22 -j ACCEPT
# Permite acesso HTTP do endereço 192.168.10.1
# Obs1: O endereço 192.168.10.1 representa um endereço externo
iptables -A INPUT -p tcp -s 192.168.10.1 --dport 80 -j ACCEPT
# Permite ping apenas da rede interna
# Obs1: A rede 192.168.20.0/24 é a rede interna do cliente.
iptables -A INPUT -p icmp -s 192.168.20.0/24 --icmp-type 8 -j ACCEPT

# PREVINIR DoS INPUT #
iptables -A INPUT -p tcp --dport 80 -m limit --limit 25/minute --limit-burst 100 -j ACCEPT

# LOG DROP INPUT #
iptables -A INPUT -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix " INPUT DROP "
iptables -A INPUT -j DROP

#######################################
# --------- TRAFEGO OUTPUT  --------- #
#######################################
# Essa cadeia contém as regras que tratam os pacotes originados do Firewall.

# --> Exemplos <-- #
# Permite que o Firewall resolva nomes (DNS)
iptables -A OUTPUT -p udp --dport 53 -j ACCEPT

# Permite que o Firewall ping para qualquer destino
iptables -A OUTPUT -p icmp --icmp-type 8 -j ACCEPT

# LOG DROP OUTPUT #
iptables -A OUTPUT -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix " OUTPUT DROP "
iptables -A OUTPUT -j DROP

#######################################
# --------- TRAFEGO FORWARD --------- #
#######################################
# Essa cadeia contém as regras que tratam os pacotes que passam pelo Firewall, ou seja, não são conexões destinados ou originados pelo Firewall.

# --> Exemplos <-- #
# Permite encaminhamento das portas utilizadas nas regras de NAT
iptables -A FORWARD -p tcp --dport 80 -j ACCEPT
iptables -A FORWARD -p tcp --dport 22 -d 192.168.20.4 -j ACCEPT
# Caso queira permite encaminhamento ALL, descomente a regra abaixo
# Obs1: enp0s3 (interface externa) e enp0s8 (interface interna)
# iptables -A FORWARD -i enp0s3 -o enp0s8 -j ACCEPT
}

function nat () {
echo -n "Regras da tabela NAT  ..................................... "
#######################################
# ----------- TABELA NAT ------------ #
#######################################
# O NAT é dividido em:
# --> SNAT (Source NAT): aplica-se quando desejamos alterar o endereço de origem do pacote.
# Somente a chain POSTROUTING faz SNAT. O mascaramente é um exemplo de SNAT.
# --> DNAT (Destination NAT): aplica-se quando desejamos alterar o endereço de destino do pacote.
# As chains OUTPUT e PREROUTING fazem DNAT. O redirecionamento de porta, de servidor, load balance, proxy transparente são exemplos de DNAT.

#######################################
# ------ TRAFEGO POSTROUTING -------- #
#######################################
# Utilizada para analisar pacotes que estão saindo do kernel após sofrerem NAT.
# O POSTROUTING pode realizar ações de NAT com endereço de origem do pacote e a porta.
# Essas ações são conhecidas como SNAT

# --> Exemplos <-- #
# Obs1: A rede 192.168.20.0/24 representa a rede interna do cliente.
# Obs2: Caso queira compartilhar Internet, descomente e faça adaptação da regra abaixo.
# iptables -t nat -A POSTROUTING -s 192.168.20.0/24 -o enp0s3 -j MASQUERADE

#######################################
# ------- TRAFEGO PREROUTING -------- #
#######################################
# Utilizada para analisar pacotes que estão entrando no kernel e sofrem NAT.
# O PREROUTING pode realizar ações de NAT com o endereço de destino do pacote e a porta.
# Essas ações são conhecidas como DNAT

# --> Exemplos <-- #
# Obs1: O endereço 192.168.10.3 representa a interface externa do Firewall.
# Obs2: O endereço 192.168.20.4 representa um servidor na rede interna.
# Obs3: Caso queira realizar NAT para a rede interna (servidor WEB), descomente e faça adaptação da regra abaixo.
iptables -t nat -A PREROUTING -p tcp -d 192.168.10.3 --dport 80 -j DNAT --to 192.168.20.4:80
# Obs4: Caso queira realizar NAT para a rede interna (servidor SSH), descomente e faça adaptação da regra abaixo.
# Obs5: A regra abaixo permite redirecionamento de porta para a rede interna.
iptables -t nat -A PREROUTING -p tcp -d 192.168.10.3 --dport 4444 -j DNAT --to 192.168.20.4:22
# Obs6: Caso queira realizar redirecionamento de porta (usando REDIRECT), descomente e faça adaptação da regra abaixo.
#iptables -t nat -A PREROUTING -p tcp -i enp0s3 -d 192.168.10.3 --dport 1000 -j REDIRECT --to-ports 9000

#######################################
# --------- TRAFEGO OUTPUT ---------- #
#######################################
# Utilizada para analisar pacotes que são gerados na própria máquina e que irão sofrer NAT.
# O OUTPUT pode realizar ações de NAT com o endereço de destino do pacote.
# Essas ações são conhecidas como DNAT

# --> Exemplos <-- #
# Obs1: Qualquer pacote TCP originado no Firewall e destinado a qualquer porta da maquina 10.0.0.10, será desviado para a maquina 10.0.0.1
# Obs2: Caso queira realizar NAT utilizando a chain OUTPUT, descomente e faça adaptação da regra abaixo.
# iptables -t nat -A OUTPUT -p tcp -d 10.0.0.10 -j DNAT --to 10.0.0.1
}

function mangle (){
echo -n "Regras da tabela MANGLE  .................................. "
#######################################
# --------- TABELA MANGLE ----------- #
#######################################
# Essa tabela tem a função de especificar ações especiais que devem ser aplicadas no tráfego que passa pelas cadeias.
# As ações ocorrem antes das ações das tabelas FILTER e NAT
# Suponha que a chain INPUT seja acionada na tabela MANGLE. Isso significa que regras especiais deverão ser aplicadas antes que os
# pacotes passem pela chain INPUT correspondente a tabela FILTER.

# --> Exemplos <-- #
# Obs1: Caso queira definir maior prioridade em um determinado serviço (ex. FTP)
# iptables -t mangle -A PREROUTING -p tcp --dport 20:21 -j TOS --set-tos 4
}

#######################################
# ------- CHAMADA DE FUNÇÕES -------- #
#######################################

function IniciaFirewall(){
echo -e "\033[01;31m===================================================================="
echo -e "|     \033[01;32mF1R3W4LL IPTABLES\033[01;31m     ______     \033[01;32mCR34T3D  BY:CRENATOVB\033[01;31m       |"
echo -e "\033[01;31m====================================================================\033[01;37m"
echo -e ""

if limpatabelas
  then
   echo -e "[\033[01;32m  OK  \033[01;37m] "
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if ativaprotecao
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if politicaspadrao
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if smurf
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if pkgsyn
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if pkgfragmentado
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if pkgnull
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if pkgxmas
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if pkgfin
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if pkginvalidos
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if flagsrst
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if portscan
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if permitirloop
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if filter
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if nat
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if mangle
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
}

function ParaFirewall(){
echo -e "\033[01;31m===================================================================="
echo -e "|     \033[01;32mF1R3W4LL IPTABLES\033[01;31m     ______     \033[01;32mCR34T3D  BY:CRENATOVB\033[01;31m       |"
echo -e "\033[01;31m====================================================================\033[01;37m"
echo -e ""

if LimpaRegras
  then
   echo -e "[\033[01;32m  OK  \033[01;37m] "
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
fi
if AtivaPing
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
if DesativaProtecao
  then
   echo -e "[\033[01;32m  OK  \033[01;37m]"
  else
   echo -e "[\033[01;31m  Erro  \033[01;37m]"
 fi
 echo
}

case $1 in
  start)
   IniciaFirewall
   exit 0
  ;;

  stop)
   ParaFirewall
  ;;

  *)
   echo "Escolha uma opção válida { start | stop }"
   echo
esac